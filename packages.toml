# --installers=pacman,yay,sh
# no task variants
# deps will first try to resolve via a pkg entry, then try to install the package directly

# Package information
[pkg.vim]
    default = "vim" #special assumed entry that will be the default name for this pkg
    apt = "vim-apt" #all other k/v pairs assume the key is a package manager alias
    apk = "neovim"  #and the value is the name of that package for that specific manager

# Installers
# Installer definitions, used to determine if an installer is available on the target machine
# If the result of the detect command is a 0 exit code, the installer is available
# This works like a macro, access via @install
# The following are built-in installers:
# apt, brew, apk, yay, pacman, sh, dnf
[installer.apt_custom]
    run_if = ["which apt"]
    sudo = true # the default for this installer, over-ridden by command line args
    cmds = ["${sudo} apt install -yvql ${pkg}"] #command line parameters

# example skip_if for this installer
[installer.pacman]
    run_if = ["which pacman"] #only use this installer if run_if is true
    skip_if = ["which yay"] #only use this installer if skip_if is false
    sudo = true # the default for this installer, over-ridden by command line args
    cmds = ["${sudo} apt install -yvql ${pkg}"] #command line parameters

# Example built-in installer definition, which can be over-ridden
[installer.apt]
    detect = ["which apt"]
    sudo = true
    cmds = ["${sudo} apt install -y ${pkg}"]

#predefined macros are:
# @install

# Macros
#@install and @install_apt, @install_brew, etc is a special built-in macro that can be over-ridden, but is not necessary to define.
#@install automatically tries to use the first available installer in a prioritized list, usually package manager first then shell
#Macros can have installer targets as variants, so __apk, __brew, etc. You can add your own installer targets and associate them to any macro you wish.
[macro.clone]
  deps = ["git"]
  insert = "git clone"

#only runs when @echo is called on a system with apk available
[macro.echo__apk]
  insert = "apk -v"

[task.git]
  cmds = ["@install git"]
  links = [".config/git/config"] #auto-detect if template

# Tasks
[task.fish]
    run_if = ["which bash"] #only run if condition true
    skip_if = ["which fish"] #only run if condition false
    cmds = ["@install #{fish}", "chsh -s /usr/bin/fish"] # #{word} will try to match it to a package by that name for further processing, or will be replace with just a string if no package definition is found
    links = [".config/fish/config.fish"]

[task.golang]
    cmds = ["mkdir -p ${GOPATH}", "@install #{golang}"]

[task.dev]
    deps = ["golang"]

[task.default]
    deps = ["git"] #first tries to see if a task by that name exists, then tries to just install it if not
    cmds = ["@install #{fd}"]